Good answer for Midterm Question: Reduction

def alterYesToNoGs(inString):
  # M1: Add function body
  progString = rf('Progstring.txt')
  newInString = rf('inString.txt')
  val = universal(progString, inString)

  if val=='yes':
    return inString.replace('G', 'C')
  else:
    return inString + 'A'

def yesviaNoGs(progString, inString):
  utils.writeFile('progString.txt', progSTring)
  utils.writeFile('inString.txt', inString)

  return noGs(rf('alterYesToNoGs.py'))

With this solution, we can prove that noGs is undecidable.
When we execute the program, we replace all G if we can say that yesOnString is known undeciable then we can assume that noGs is also undeciable.

-----------------------------------------------------------------------

def godel_noGs(inString):
  godelProg = rf('godel_noGs.py')

  # Arithmetic statement. This does not contain Gs
  noGsInPeano = ConvertNoGsOnStringToPeano(godelProg, inString)

  # Negative statement above
  notNoGsInPeano = 'NOT' + noGsInPeano

  if provableInPeano(notNoGsInPeano) == 'yes':
    # Return a string that is inconsistent with notNoGsInPeano being provable
    return inString.replace('G', 'C')
  else:
    # Return a string that would mean that notNoGsInPeano is true. inString + 'A' would do too
    return 'G'


-------------------------------------------------------------------------

The time complexity depends on the value of inString (M).

length of input n = O(log(M))
value of input M = {O(10^n) if input uses decimal notation, O(2^n) if input uses binary notation}

Depending on whether M is odd or even. The python code is O(1)
For some reason, the slides say that the answer is that it requires 10^n steps (exponential time)

f is a superpolynomial where f (not E) O(n^k), k >= 1 - that is, f grows faster than any polynomial

standard TM O(t^2)
multi-tape universal TM O(tlogt)
multi-tape TM O(t^3)
random-access TM O(t)
real (classical) computer O(t)
python program O(t)


f(t) = tlog(t)
f(t^3) = t^3 * log(t^3) = t^3 * 3 * log(t) = O(t^3*log(t))

Def of Poly. Set of computational problems that can be solved in O(n^k)

Def of Exponential. Set of computational probelsm that can be solved in O(2^(p(n))), 
where p(n) is some polynomial
