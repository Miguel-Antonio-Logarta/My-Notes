We are using a turing reduction to prove whether a problem is 
computable or not

So we have to use F <=_t G. If we can solve G, then we can solve F

This is an example of an alters function.
It takes in a program string and input string
It will return yes if the string output of P is greater than 10

This is the behavior of the function f
f('abc') == 'abc'*4
f('abcd') == 'a'

When we plug that function into longerthan10 with various inputs,
longerThan10 returns 'yes' or 'no' depending on the output of f
longerThan10(P, I) = 'yes' iff length of P(I) > 10
longerThan10(rf('f.py'), 'abc') == 'yes'
longerThan10(rf('f.py'), 'abcd') == 'no'

def altersYesToG(inString):
    # somehow, takes the 'yes' VS not 'yes' outputs from 
    # progString(inString), the parameters to the via function
    # and maps them to DISJOINT outputs to meaningful to G
    # THE problem reduced to.
    # Thus, if progString(inString) == 'yes', the G
    # will interpret the alters function on the other way
    # if not it will interpret in a way that is distinct.
    # DSS means Decode into a Single String while 
    # ESS means Encode into a Single String
    (progString, newInString) = utils.DSS(inString)
    val = universal(progString, newInString) # progString(newInString)
    if val == 'yes':
      return # a string shorter than 10
    else: 
      return # a string longer than 10
      

What we want to be true is that result should return 'yes' if
the singleString is longer than 10
def yesViaG(progString, inString):
    # is the reduction of yesOnString to G. yesOnString =< T G
    # YOU MUST call G from within yesOnString
    # One argument to G must be the source code
    # of the alters function
    singleString = utils.ESS(progString, inString)
    result = longerThan10(rf('altersYesTo.py'), singleString)
    if result == 'yes':
      return 'no'
    else: 
      return 'yes'


Echofirst Notes / HW l0905b Notes ---------------------------------------
ƒ is a positive instance of echoFirstCharacter(P) 
iff ∃I(I ≠ ℇ and the first character in I and P(I) are the same). 
As examples:

def ƒ₁(inString): return inString

def ƒ₂(inString):
    if inString == 'abc': return 'az'
    return 'z'

def ƒ₃(inString): return ''

def ƒ₄(inString):
   if inString == '': return ''
   elif inString[0] == 'A': return 'Z'
   else return 'A'

echoFirstCharacter(rf('ƒ₁.py') == echoFirstCharacter(rf('ƒ₂.py') == 'yes'

echoFirstCharacter(rf('ƒ₃.py') == echoFirstCharacter(rf('ƒ₄0.py') == 'no'

Complete these Python functions to show that echoFirstCharacter 
is undecidable by Turing reduction from yesOnString. 
Assume that alterYesToEchoFirst and YesViaEchoFirst live in separate 
.py files

My Notes:
f1 and f2 is yes because those functions are guaranteed to return a string that is not empty
f3 and f4 is unpredictable since it might return a non-empty string and an empty string
echoFirstCharacter returns f3 and f4 as 'no' since those functions return an empty string
echoFirstCharacter only takes one input. It takes in a reference to a function, and passes
an unknown string to that function. That function returns a string, and echoFirstCharacter
outputs either a 'yes' or a 'no'

echoFirstCharacter(P) # P is the program
---------------------------------------------------------

import echoFirstCharacter
import utils
from utils import rf

from universal import universal

def alterYesToEchoFirst(inString):
    # Complete for L0905b
    # ...
    progString = rf('progFile.py')
    newInString = rf('inFile.txt')
    val = universal(progString, newInString)
    if val == 'yes':
      return inString # First character will match. You could also return 'yes' since it would work, on any string other than epsilon
    else:
      return '' # First character will not match
---------------------------------------------------------

# "Oracle" function -- assume exists to show contradiction
#
import echoFirstCharacter
import utils
from utils import rf

def yesViaEchoFirst(progString,inString):
    # Complete for L0905b, including adding
    # any extra needed parameter to the call to
    # echoFirstCharacter
    # ...
    # ... echoFirstCharacter(rf('alterYesToEchoFirst.py'),..)
    # ...
    utils.writeFile('progFile.txt', progString)
    utils.writeFile('inFile.txt', inString)
    result = echoFirstCharacter(rf('alterYesToEchoFirst.py'))
    return result
---------------------------------------------------------

reverseOnString(P, I) == 'yes' iff P(I) == I backwards; 
otherwise reverseOnString(P,I) = 'no'

Show that reverseOnString is undecidable by reduction from 
yesOnString. The function reverse(inString), defined below, returns
the reverse of a python string

---------------------------------------------------------

def reverse(inString):
  return inString[::-1]

---------------------------------------------------------

import utils
from utils import ref
from universal import universal

def altersYesToReverse(inString):
  (progString, newInString) = utils.DSS(inString)
  if val == 'yes':
    return reverse(inString)
  else:
    return inString + 'A' # suppose inString was a palindrome ACCA

def yesViaReverse(progString, inString):
  singleString = utils.ESS(progString, inString)
  result = reverseOnString(rf('altersYesToReverse.py'), singleString)
  return result # may revisit
