Python program starts with time complexity of O(n^4)

Correct answer:
A) O(n^24)
B) O(n^12)
C) O(n^4)
D) O(n^12*log(n))
E) O(log(n))

My answer: 
A) A standard turing machine: O(n^8)
B) A multi-tape Turing Machine w/ independent heads: O(n^12)
C) A random-access Turing Machine: O(n^4)
D) A multi-tape universal turing machine w/ independent heads O(nlog(n))
E) A quantum computer: It is believed to have exponential penalty. O(n^4)

python n^4 -> log(n^4) = 4*log(n), O(log(n^4)) = O(log(n))

Explanation: Looking at the visualization given in the slides,
to get A, we go from O(t) -> O(t^3) -> O(t^2). For A, we start with n^4,
  then plug that into t^3, so we get n^12, then we plug it into t^2, so we
  get n^24


